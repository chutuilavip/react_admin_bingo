{"version":3,"file":"static/js/560.91a2fa3f.chunk.js","mappings":"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","sources":["views/play/tables/Tables.js"],"sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react'\nimport './style.css'\nimport { LoadingOutlined, FileExclamationOutlined } from '@ant-design/icons'\n\nimport axios from 'axios'\nimport {\n  CForm,\n  CContainer,\n  CModalFooter,\n  CButton,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CFormInput,\n  CFormSelect,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport ReactPaginate from 'react-paginate'\n\nconst token = localStorage.getItem('token_key')\n\nlet limit = 10\n\nconst Tables = () => {\n  const [data, setData] = useState([])\n  const [page, setPage] = useState(0)\n  const [detail, setDetail] = useState(false)\n  const [dataDetail, setDataDetail] = useState([])\n  const [nickname, setNickname] = useState('')\n  const [stateResult, setStateResult] = useState('')\n\n  // handle detail\n\n  const handleDetail = (data) => {\n    setDataDetail(data)\n    setDetail(!detail)\n  }\n  const getSignature = async () => {\n    try {\n      const result = await axios({\n        method: `Get`,\n        url: `${process.env.REACT_APP_URL_API}/api/history/plays?page=1&limit=${limit}`,\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n        params: {\n          nickname: nickname,\n          iswin: stateResult,\n        },\n      })\n      console.log(result)\n      return result\n    } catch (err) {\n      console.log('err')\n    }\n  }\n  async function getPage() {\n    const data = await getSignature()\n    const total = data.data.res.total\n    setPage(Math.ceil(total / limit))\n    setData(data)\n  }\n\n  useEffect(() => {\n    getPage()\n  }, [limit])\n\n  const fetchPage = async (currentPage) => {\n    try {\n      const result = await axios({\n        method: `Get`,\n        url: `${process.env.REACT_APP_URL_API}/api/history/plays?page=${currentPage}&limit=${limit}`,\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      return result\n    } catch (err) {\n      console.log('err')\n    }\n  }\n\n  const handlePageClick = async (data) => {\n    let currentPage = data.selected + 1\n    const pageFormServer = await fetchPage(currentPage)\n    setData(pageFormServer)\n  }\n\n  useEffect(() => {\n    async function ss() {\n      const data = await getSignature()\n      setData(data)\n    }\n    ss()\n  }, [])\n  const handleSelectAction = (e) => {\n    setStateResult(e.target.value)\n  }\n  return (\n    <div>\n      <CModal className=\"modal_detail\" visible={detail} onClose={() => setDetail(false)}>\n        <CModalHeader>\n          <CModalTitle>History Detail</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <CRow>\n            <CCol xs={17}>\n              <CCard className=\"mb-4\">\n                <CCardBody>\n                  <CTable>\n                    <CTableHead>\n                      <CTableRow>\n                        <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Data</CTableHeaderCell>\n                      </CTableRow>\n                    </CTableHead>\n                    <CTableBody>\n                      <CTableRow>\n                        <CTableDataCell scope=\"row\">ID</CTableDataCell>\n                        <CTableDataCell scope=\"row\">{dataDetail.tID}</CTableDataCell>\n                      </CTableRow>\n                      <CTableRow>\n                        <CTableDataCell scope=\"row\">User ID</CTableDataCell>\n                        <CTableDataCell scope=\"row\">{dataDetail.uID}</CTableDataCell>\n                      </CTableRow>\n                      <CTableRow>\n                        <CTableDataCell scope=\"row\">Is Win?</CTableDataCell>\n                        <CTableDataCell scope=\"row\">\n                          {dataDetail.is_win === 0 ? 'Lose' : 'Win'}\n                        </CTableDataCell>\n                      </CTableRow>\n                      <CTableRow>\n                        <CTableDataCell scope=\"row\">Reward</CTableDataCell>\n                        <CTableDataCell scope=\"row\">{dataDetail.reward}</CTableDataCell>\n                      </CTableRow>\n                      <CTableRow>\n                        <CTableDataCell scope=\"row\">Fee</CTableDataCell>\n                        <CTableDataCell scope=\"row\">{dataDetail.fee}</CTableDataCell>\n                      </CTableRow>\n                      <CTableRow>\n                        <CTableDataCell scope=\"row\">Total Score</CTableDataCell>\n                        <CTableDataCell scope=\"row\">{dataDetail.total_score}</CTableDataCell>\n                      </CTableRow>\n                      <CTableRow>\n                        <CTableDataCell scope=\"row\">Nick Name</CTableDataCell>\n                        <CTableDataCell scope=\"row\">{dataDetail.NickName}</CTableDataCell>\n                      </CTableRow>\n                    </CTableBody>\n                  </CTable>\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => setDetail(false)}>\n            Close\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <CContainer>\n                <div className=\"row justify-content-md-center\">\n                  <CCol>\n                    <strong>History Play game</strong>\n                  </CCol>\n                  <CCol xs lg={2}></CCol>\n                  <CCol md=\"auto\">\n                    <CForm>\n                      <CFormInput\n                        type=\"email\"\n                        id=\"exampleFormControlInput1\"\n                        placeholder=\"NickName\"\n                        aria-describedby=\"exampleFormControlInputHelpInline\"\n                        onChange={(event) => setNickname(event.target.value)}\n                      />\n                    </CForm>\n                  </CCol>\n                  <CCol xs lg={2}>\n                    <CFormSelect\n                      aria-label=\"Default select example\"\n                      onChange={handleSelectAction}\n                      options={[\n                        'Win/Lose',\n                        { label: 'Win', value: '1' },\n                        { label: 'Lose', value: '0' },\n                      ]}\n                    />\n                  </CCol>\n                  <CCol xs lg={2}>\n                    <CButton color=\"success\" variant=\"outline\" onClick={getPage}>\n                      Search\n                    </CButton>\n                  </CCol>\n                </div>\n              </CContainer>\n            </CCardHeader>\n\n            <CCardBody>\n              {data?.data?.res?.data?.data ? (\n                data?.data?.res?.data?.total === 0 ? (\n                  <div\n                    style={{\n                      width: '100%',\n                      display: 'flex',\n                      justifyContent: 'center',\n                      flexDirection: 'column',\n                    }}\n                  >\n                    <FileExclamationOutlined style={{ color: '#ccc', fontSize: 50, margin: 20 }} />\n                    <p style={{ width: '100%', display: 'flex', justifyContent: 'center' }}>\n                      No data\n                    </p>\n                  </div>\n                ) : (\n                  <CTable>\n                    <CTableHead>\n                      <CTableRow>\n                        <CTableHeaderCell scope=\"col\">ID</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">NickName</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Vs Player</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Score</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Win/Lose</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Time</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Fee</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Action</CTableHeaderCell>\n                      </CTableRow>\n                    </CTableHead>\n                    <CTableBody>\n                      {data?.data?.res?.data?.data.map((item, index) => (\n                        <CTableRow key={index}>\n                          <CTableHeaderCell scope=\"row\">{item.tID}</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"row\">{item.NickName}</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"row\">{item.vs_nickname}</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"row\">{item.total_score}</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"row\">\n                            {item.is_win === 0 ? 'Lose' : 'Win'}\n                          </CTableHeaderCell>\n                          <CTableHeaderCell scope=\"row\">{item.logdate}</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"row\">{item.fee}</CTableHeaderCell>\n                          <CTableDataCell>\n                            <svg\n                              onClick={() => handleDetail(item)}\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              className=\"h-6 w-6\"\n                              fill=\"none\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                              height={30}\n                              width={30}\n                              style={{ cursor: 'pointer' }}\n                            >\n                              <path d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01\" />\n                            </svg>\n                            {/* </button> */}\n                          </CTableDataCell>\n                        </CTableRow>\n                      ))}\n                    </CTableBody>\n                  </CTable>\n                )\n              ) : (\n                <div\n                  style={{\n                    width: '100%',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    flexDirection: 'column',\n                  }}\n                >\n                  <LoadingOutlined style={{ color: '#ccc', fontSize: 50, margin: 20 }} />\n                  <p style={{ width: '100%', display: 'flex', justifyContent: 'center' }}>\n                    Loading...\n                  </p>\n                </div>\n              )}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <ReactPaginate\n        previousLabel={'< Previous'}\n        nextLabel={'Next >'}\n        breakLabel={'...'}\n        pageCount={page}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={3}\n        onPageChange={handlePageClick}\n        containerClassName={'pagination justify-content-center'}\n        pageClassName={'page-item'}\n        pageLinkClassName={'page-link'}\n        previousClassName={'page-item'}\n        previousLinkClassName={'page-link'}\n        nextClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        breakClassName={'page-item'}\n        breakLinkClassName={'page-link'}\n        activeClassName={'active'}\n      />\n    </div>\n  )\n}\nexport default Tables\n"],"names":["token","localStorage","getItem","useState","data","setData","page","setPage","detail","setDetail","dataDetail","setDataDetail","nickname","setNickname","stateResult","setStateResult","getSignature","axios","method","url","process","headers","Authorization","params","iswin","result","console","log","getPage","total","res","Math","ceil","useEffect","fetchPage","currentPage","handlePageClick","selected","pageFormServer","ss","className","visible","onClose","xs","scope","tID","uID","is_win","reward","fee","total_score","NickName","color","onClick","lg","md","type","id","placeholder","onChange","event","target","value","e","options","label","variant","style","width","display","justifyContent","flexDirection","FileExclamationOutlined","fontSize","margin","map","item","index","vs_nickname","logdate","handleDetail","xmlns","fill","viewBox","stroke","height","cursor","d","LoadingOutlined","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName"],"sourceRoot":""}